	---------
	Searching
	---------

Searching

	The main benefit of Gldapo is that it allows you to search a LDAP directory in a Groovy Object Oriented manner. When you register a schema class static methods are added to that class to enable searching.
	
	For the purpose of documentation we will use the following schema class as an example.
	
+-------------------------------+
import gldapo.schema.annotation.GldapoIdentifyingAttribute
import gldapo.schema.annotation.GldapoSchemaFilter

@GldapoIdentifyingAttribute("uid")
@GldapoSchemaFilter("(objectclass=person)")
class Person
{
	List objectclass
	String uid
	String givenName
	String sn
}
+-------------------------------+
	
* find()

	The <<<find()>>> method returns a <<<List>>> of objects of the schema class that match the specified search criteria. Find accepts one argument of type <<<Map>>> so you can use Groovy's convenient named parameterish syntax.
	
+-------------------------------+
import javax.naming.directory.SearchControls

def people = Person.find(
	template: "myTemplate", 
	filter: "(sn=Daley)", 
	base: "ou=people",
	pageSize: 500,
	countLimit: 2000,
	derefLinkFlag: true,
	searchScope: SearchControls.SUBTREE_SCOPE,
	timeLimit: 10000
)

assert(people instanceof List)
assert(people[0] instanceof Person)
assert(people[0].objectclass instanceof List)
+-------------------------------+

	The following are the arguments that find() accepts. None are strictly required.

	* {template}

	If the value is a String, the template of that name from the Gldapo.templateRegistry will be used. An exception will be thrown if there is no registered template with that name.

	You can also directly pass an instance of GldapoTemplate.

	This may be omitted if a default template was specified as part of initialization.

	* {filter}

	The search filter to be used to restrict the result set. If the schema class defines a schema filter (via the SchemaClassFilter annotation), the passed filter will be anded with the schema filter.

	* {base}

	The sub context of the base specified in the templates context source to search at.

	* {pageSize}

	The number of records to include in one page ({{{http://tools.ietf.org/html/rfc2696}}}). All searches with Gldapo use paging. A default of 500 will be used if omitted.

	* {countLimit}

	The maximum number of records to return

	* {derefLinkFlag}

	Enables/disables link dereferencing during the search.

	* {searchScope}

	The scope of the search. See {{{http://java.sun.com/j2se/1.5.0/docs/api/javax/naming/directory/SearchControls.html}}} for the possible values.

	* timeLimit

	The maximum number of milliseconds to use searching.

* load()

	The load() method is useful for retrieving a single entry. It requires the presence of the GldapoIdentifyingAttribute annotation on the schema class.
	
+-------------------------------+
def me = Person.load("daleyl", "myTemplate")
assert(me.givenName = "Luke")
+-------------------------------+

	or 

+-------------------------------+
def me = Person.load("daleyl")
assert(me.givenName = "Luke")
+-------------------------------+

	If a default template was specified.

	The above call to load() is equivalent to the following ...

+-------------------------------+
def me = Person.find(filter: "(uid=daleyl)", template: "myTemplate", countLimit: 1)[0]
+-------------------------------+

	If there is in fact no entry in the directory matching that search, load() will return null.