	---------------------
	Guide: Schema Classes
	---------------------

Schema Classes

	Schema classes provide the information on how to map an LDAP entry to a Groovy object. There is no Schema class base class, i.e. you don't need to extend anything. 
	
Attributes

	The properties of a schema class map to the attributes of an LDAP entry.

+-------------------------------+
class SomeKindOfLdapEntry
{
	String username
	List someMultivaluedAttribute
	Integer someIntAttribute
}
+-------------------------------+

Type Conversion

	Gldapo has to know how to convert the values of an LDAP entry into Groovy objects. There are three types of conversions.
	
* Attribute Based Conversion

	Let's say that you want to convert an LDAP value to a Date, but your LDAP date attribute is in an extremely bizarre format (I am looking at you Active Directory <<<accountExpires>>> attribute). You need to specify an attribute conversion. An attribute conversion is just a static method on your schema class that follows a certain convention.

+-------------------------------+
class ADPerson
{
	Date accountExpires
	
	static convertToAccountExpiresAttribute(javax.naming.directory.Attribute attribute)
	{
		// Convert attribute to a Date object and return here
	}
}
+-------------------------------+

	Attribute conversion methods must be called <<<convertTo>>> + <capitalized attribute name> + <<<Attribute>>> and must take exactly one argument of type {{{https://java.sun.com/j2se/1.5.0/docs/api/javax/naming/directory/Attribute.html}javax.naming.directory.Attribute}}.
	
* Type Based Conversion

	You can also specify conversions by type. A type based conversion will only be attempted when there is no suitable attribute based conversion.

+-------------------------------+
class ADPerson
{
	Date accountExpires
	Date passwordLastSet

	static convertToDateType(javax.naming.directory.Attribute attribute)
	{
		// Convert attribute to a Date object and return here
	}
}
+-------------------------------+

	Type conversion methods must be called <<<convertTo>>> + <simple class name> + <<<Type>>> and must take exactly one argument of type {{{https://java.sun.com/j2se/1.5.0/docs/api/javax/naming/directory/Attribute.html}javax.naming.directory.Attribute}}.
	
* Default Type Based Conversion

	Default type based conversions are supplied by Gldapo and require nothing from the developer. They are only attempted if an attribute based conversion can not be found and a type based conversion can not be found. The {{{../gapi/gldapo/schema/attribute/typeconversion/GldapoTypeConversions.html}GldapoTypeConversions}} class provides the default conversions.
	
	You can install your own default conversions at runtime using the {{{http://groovy.codehaus.org/ExpandoMetaClass}ExpandoMetaClass}} feature of Groovy.
	
+-------------------------------+
import javax.naming.directory.Attribute
import gldapo.schema.attribute.typeconversion.GldapoTypeConversions

GldapoTypeConversions.metaClass.'static'.convertToCustomType = { Attribute attribute ->
	// create an instance of Custom here and return
}
+-------------------------------+

Schema Filter

	It might be convenient to map a schema class to a certain kind of ldap entry. A common use case is to map a a schema class based on the LDAP <<<objectclass>>> attribute. For example you may want to create a <<<Person>>> schema class that maps to LDAP entries where <<<(objectclass=person)>>>.
	
	Instead of <anding> <<<(objectclass=person)>>> into every search filter, you can specify a schema filter via the <<<GldapoSchemaFilter>>> annotation.
	
+-------------------------------+
import gldapo.schema.annotation.GldapoSchemaFilter

@GldapoSchemaFilter("(objectclass=person)")
class Person
{
	// attributes/properties
}
+-------------------------------+

	Now everytime you {{{searching.html}search}} using your schema class, the filter that you specified will be anded to the criteria you specify at search time.

Identifying Attribute

	If your ldap entries are uniquely identifiable by a particular attribute (like a username) you can specify that with the GldapoIdentifyingAttribute annotation.
	
+-------------------------------+
import gldapo.schema.annotation.GldapoIdentifyingAttribute

@GldapoIdentifyingAttribute("username")
class Person
{
	String username
}
+-------------------------------+

	This makes it easy to retrieve unique entries. See {{{searching.html#load()}guide: searching#load()}}.