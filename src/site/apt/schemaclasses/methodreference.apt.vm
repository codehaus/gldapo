    ---------------------------------
    Schema Classes - Method Reference
    ---------------------------------

Method Reference

    The following methods are available on all schema classes.

    * {{{#getDirectory}getDirectory()}}

=================================

    * {{{#setDirectoryGldapoDirectory}setDirectory(GldapoDirectory)}}

=================================

    * {{{#getDn}getDn()}}

=================================

    * {{{#getRdn}getRdn()}}

=================================

    * {{{#setRdnString}setRdn(String)}}

    * {{{#setRdnDistinguishedName}setRdn(DistinguishedName)}}

=================================

    * {{{#find}find()}}

    * {{{#findMap}find(Map)}}

=================================

    * {{{#findAll}findAll()}}

    * {{{#findAllMap}findAll(Map)}}

=================================

    * {{{#getByDnString}getByDn(String)}}

    * {{{#getByDnStringString}getByDn(String,String)}}

    * {{{#getByDnStringGldapoDirectory}getByDn(String,GldapoDirectory)}}

=================================

    * {{{#create}create()}}

=================================

    * {{{#update}update()}}

=================================

    * {{{#save}save()}}

=================================

    * {{{#moveString}move(String)}}

    * {{{#moveDistinguishedName}move(DistinguishedName)}}

=================================

    * {{{#replaceDistinguishedName}replace(DistinguishedName)}}

=================================

    * {{{#delete}delete()}}

    * {{{#deleteRecursively}deleteRecursively()}}

=================================

    * {{{#authenticateString}authenticate(String)}}

=================================

* {getDirectory()}

    Returns the instance of <<<GldapoDirectory>>> that the entry was retrieved from.

+-------------------------------+
GldapoDirectory getDirectory()
+-------------------------------+

* {setDirectory(GldapoDirectory)}

    Sets the directory object to bind the object to. After an object's directory is set, it cannot be changed. A <<<GldapoException>>> will be thrown if this is attempted.

+-------------------------------+
void setDirectory(GldapoDirectory directory) throws GldapoException
+-------------------------------+

    <<Throws:>>

    * <<<GldapoException>>> if the object already has a directory object.

* {getDn()}

    Returns the {{{${springLdapApi}/org/springframework/ldap/core/DistinguishedName.html}distinguished name}} of this entry.

+-------------------------------+
DistinguishedName getDn()
+-------------------------------+

* {getRdn()}

    Returns the {{{${springLdapApi}/org/springframework/ldap/core/Distingui{{{../schemaclasses/searching.html}searching}}shedName.html}distinguished name}} <relative> to the base of the directory of this entry.

+-------------------------------+
DistinguishedName getRdn()
+-------------------------------+

* {setRdn(String)}

    Creates a {{{${springLdapApi}/org/springframework/ldap/core/DistinguishedName.html}DistinguishedName}} object from the rdn string and calls {{{#setRdnDistinguishedName}setRdn(DistinguishedName)}}

+-------------------------------+
void setRdn(String rdn) throws GldapoException
+-------------------------------+

    <<Throws:>>

    * <<<GldapoException>>> if the object already has an rdn.

* {setRdn(DistinguishedName)}

    Sets the location of this object relative to base of this objects directory. It can only be set once. A <<<GldapoException>>> will be throw if an attempt is made to set the rdn more than once.

    This is not the way to move an object in the directory, see {{{#move}move()}}.

+-------------------------------+
String setRdn(DistinguishedName rdn) throws GldapoException
+-------------------------------+

    <<Throws:>>

    * <<<GldapoException>>> if the object already has an rdn.

* {find()}

    Calls {{{#findMap}find(Map)}} with an empty map.

+-------------------------------+
static Object find() throws NamingException, GldapoNoDefaultDirectoryException, GldapoOperationException
+-------------------------------+

    <<Throws:>>

    * <<<{{{${springLdapApi}/org/springframework/ldap/NamingException.html}NamingException}}>>> if an LDAP error occurs.

    * <<<GldapoNoDefaultDirectoryException>>> if no {{{../directories/registry.html#The_default_directory}default directory}} has been specified.

    * <<<GldapoOperationException>>> if a configuration error occurs.

* {find(Map)}

    Performs a search and returns a single object which was the first found. Or <<<null>>> if no matches were found.

    Calls {{{#findAllMap}findAll(Map)}}, passing thru options, but setting the <<<countLimit>>> option to <<<1>>>, forcing the return of maximum one object.
            
+-------------------------------+
static Object find(Map options) throws NamingException, GldapoNoDefaultDirectoryException, GldapoOperationException, GldapoDirectoryNotFoundException
+-------------------------------+

    <<Throws:>>

    * <<<{{{${springLdapApi}/org/springframework/ldap/NamingException.html}NamingException}}>>> if an LDAP error occurs.

    * <<<GldapoNoDefaultDirectoryException>>> if the <<<directory>>> option is not specified and no {{{../directories/registry.html#The_default_directory}default directory}} has been specified.

    * <<<GldapoDirectoryNotFoundException>>> if the <<<directory>>> option is specified as a string name (instead of <<<GldapoDirectory>>> instance) and no directory can be found of that name.

    * <<<GldapoOperationException>>> if a configuration error occurs.

* {findAll()}

    Calls {{{#findAllMap}findAll(Map)}} with an empty map.

+-------------------------------+
static List findAll() throws NamingException, GldapoNoDefaultDirectoryException, GldapoOperationException
+-------------------------------+

    <<Throws:>>

    * <<<{{{${springLdapApi}/org/springframework/ldap/NamingException.html}NamingException}}>>> if an LDAP error occurs.

    * <<<GldapoNoDefaultDirectoryException>>> if no {{{../directories/registry.html#The_default_directory}default directory}} has been specified.

    * <<<GldapoOperationException>>> if a configuration error occurs.
    
* {findAll(Map)}

    Performs a search returning a <<<List>>> of matching entries.

+-------------------------------+
static List findAll(Map options) NamingException, GldapoNoDefaultDirectoryException, GldapoOperationException, GldapoDirectoryNotFoundException
+-------------------------------+

    <<Throws:>>

    * <<<{{{${springLdapApi}/org/springframework/ldap/NamingException.html}NamingException}}>>> if an LDAP error occurs.

    * <<<GldapoNoDefaultDirectoryException>>> if the <<<directory>>> item is not specified and no {{{../directories/registry.html#The_default_directory}default directory}} has been specified.
        
    * <<<GldapoDirectoryNotFoundException>>> if the <<<directory>>> option is specified as a string name (instead of <<<GldapoDirectory>>> instance) and no directory can be found of that name.

    * <<<GldapoOperationException>>> if a configuration error occurs.

{}

    The map of options can contain the following items:

*--*--+
|| Attribute || Description |
*--*--+
| <<directory>> | Either the name of a registered directory, or an instance of <<<GldapoDirectory>>>. If <<<null>>>, the {{{../directories/registry.html#The_default_directory}default directory}} will be used. |
*--*--+
| <<filter>> | An LDAP filter string to use to restrict the search. If the schema class has a {{{filters.html}filter}} it will be anded to the search filter. If no filter is specified <<<"(objectclass=*)">>> |
*--*--+
| <<base>> | The LDAP path string (relative to the base of the directory) to start the search at. If ommitted, the directory base will be used |
*--*--+
| <<absoluteBase>> | The LDAP path string to start the search at, but absolutely, not relative to the directory base |
*--*--+
| <<searchScope>> | A string indicating the scope of the search (either <<<object>>>, <<<onelevel>>> and <<<subtree>>>). Default is <<<onelevel>>> |
*--*--+
| <<pageSize>> | The number of entries to return in one page. Overrides the target directories setting. If omitted or less than 1, paging will <<not>> be used |
*--*--+
| <<countLimit>> | The maximum amount of entries for the server to return. No limit is used if omitted. (be mindful that some servers set limits server side)|
*--*--+
| <<timeLimit>> | The maximum number of milliseconds to spend searching. No limit is used if omitted. (be mindful that some servers set limits server side) |
*--*--+
| <<derefLinkFlag>> | A boolean to enables/disable link dereferencing during the search. Default is <<<false>>>. |
*--*--+

* {getByDn(String)}

    Returns a single entry by it's distinguished name using the <<{{{../directories/registry.html#The_default_directory}default directory}}>>.

+-------------------------------+
static Object getByDn(String dn) NamingException, GldapoNoDefaultDirectoryException
+-------------------------------+

    <<Throws:>>

    * <<<{{{${springLdapApi}/org/springframework/ldap/NamingException.html}NamingException}}>>> if an LDAP error occurs.

    * <<<GldapoNoDefaultDirectoryException>>> if no {{{../directories/registry.html#The_default_directory}default directory}} has been specified.

* {getByDn(String,String)}

    Returns a single entry by it's distinguished name using the directory registered under <<<directoryName>>>. 
        
+-------------------------------+
static Object getByDn(String dn, String directoryName) NamingException, GldapoDirectoryNotFoundException
+-------------------------------+

    <<Throws:>>

    * <<<{{{${springLdapApi}/org/springframework/ldap/NamingException.html}NamingException}}>>> if an LDAP error occurs.

    * <<<GldapoDirectoryNotFoundException>>> if no directory can be found with the name <<<directoryName>>>.

* {getByDn(String,GldapoDirectory)}

    Returns a single entry by it's distinguished name using <<<directory>>>

+-------------------------------+
static Object getByDn(String dn, GldapoDirectory directory) throws NamingException
+-------------------------------+

    <<Throws:>>

    * <<<{{{${springLdapApi}/org/springframework/ldap/NamingException.html}NamingException}}>>> if an LDAP error occurs.

* {create()}

    Writes a brand new entry to the directory (a DN for this object must be {{{#setRdn}set}}).

+-------------------------------+
void create() throws NamingException, GldapoException
+-------------------------------+

    <<Throws:>>

    * <<<{{{${springLdapApi}/org/springframework/ldap/NamingException.html}NamingException}}>>> if an LDAP error occurs.

    * <<<GldapoException>>> if the object does not have a directory (and no <{{{../directories/registry.html#The_default_directory}default directory}}> has been specified) or rdn set.

* {update()}

    Updates the state of the object in LDAP to match the Groovy object's state.

+-------------------------------+
void update() throws NamingException, GldapoException
+-------------------------------+

    <<Throws:>>

    * <<<{{{${springLdapApi}/org/springframework/ldap/NamingException.html}NamingException}}>>> if an LDAP error occurs.

    * <<<GldapoException>>> if the object does not have a directory (and no <{{{../directories/registry.html#The_default_directory}default directory}}> has been specified) or rdn set.

* {save()}

    {{{#create}Creates}} the object if it doesn't aready exist, {{{#update}updates}} it if it does.

+-------------------------------+
void save() throws NamingException, GldapoException
+-------------------------------+

    <<Throws:>>

    * <<<{{{${springLdapApi}/org/springframework/ldap/NamingException.html}NamingException}}>>> if an LDAP error occurs.

    * <<<GldapoException>>> if the object does not have a directory (and no <{{{../directories/registry.html#The_default_directory}default directory}}> has been specified) or rdn set.

* {move(String)}

    Converts the given string into a {{{${springLdapApi}/org/springframework/ldap/core/DistinguishedName.html}DistinguishedName}} and calls {{{#moveDistinguishedName}move(DistinguishedName)}}.

+-------------------------------+
void move(String newRdn) throws NamingException, GldapoException
+-------------------------------+

    <<Throws:>>

    * <<<{{{${springLdapApi}/org/springframework/ldap/NamingException.html}NamingException}}>>> if an LDAP error occurs.

    * <<<GldapoException>>> if the object does not have a directory (and no <{{{../directories/registry.html#The_default_directory}default directory}}> has been specified) or rdn set.

* {move(DistinguishedName)}

    {{{#save}Saves}} the object if there are any unsaved changes, then moves the object in the directory to the rdn (relative to the base of the object's directory).

+-------------------------------+
void move(DistinguishedName newRdn) throws NamingException, GldapoException
+-------------------------------+

    <<Throws:>>

    * <<<{{{${springLdapApi}/org/springframework/ldap/NamingException.html}NamingException}}>>> if an LDAP error occurs.

    * <<<GldapoException>>> if the object does not have a directory (and no <{{{../directories/registry.html#The_default_directory}default directory}}> has been specified) or rdn set.

* {replace(DistinguishedName)}

    Replaces the object named by the {{{${springLdapApi}/org/springframework/ldap/core/DistinguishedName.html}DistinguishedName}} (relative to the base of the object's directory) with this objects attribute values.

+-------------------------------+
void replace(DistinguishedName newRdn) throws NamingException, GldapoException
+-------------------------------+

    <<Throws:>>

    * <<<{{{${springLdapApi}/org/springframework/ldap/NamingException.html}NamingException}}>>> if an LDAP error occurs.

    * <<<GldapoException>>> if the object does not have a directory (and no <{{{../directories/registry.html#The_default_directory}default directory}}> has been specified) or rdn set.

* {delete()}

    Removes the corresponding entry from the directory. This will fail if the object has descendants.
    
+-------------------------------+
void delete() throws NamingException, GldapoException
+-------------------------------+

    <<Throws:>>

    * <<<{{{${springLdapApi}/org/springframework/ldap/NamingException.html}NamingException}}>>> if an LDAP error occurs.

    * <<<GldapoException>>> if the object does not have a directory (and no <{{{../directories/registry.html#The_default_directory}default directory}}> has been specified) or rdn set.

* {deleteRecursively()}

    Removes the corresponding entry, and any child entries, from the directory.

+-------------------------------+
void deleteRecursively() throws NamingException, GldapoException
+-------------------------------+

    <<Throws:>>

    * <<<{{{${springLdapApi}/org/springframework/ldap/NamingException.html}NamingException}}>>> if an LDAP error occurs.

    * <<<GldapoException>>> if the object does not have a directory (and no <{{{../directories/registry.html#The_default_directory}default directory}}> has been specified) or rdn set.

* {authenticate(String)}

    Attempts to authenticate the object with the given password string. The return is the success of the authentication attempt (i.e. <<<true>>> if the password is correct, <<<false>>> otherwise).

+-------------------------------+
boolean authenticate(String password) throws GldapoException, Exception
+-------------------------------+

    <<Throws:>>

    * <<<GldapoException>>> if the object does not have a directory (and no <{{{../directories/registry.html#The_default_directory}default directory}}> has been specified) or rdn set.
    
    * <<<Exception>>> if any LDAP related error occurs.
