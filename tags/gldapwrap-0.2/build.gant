/**
 * Project Meta Data
 */
def projectName = "gldapwrap"
def author = "Luke Daley"
def version = "0.2"
def dist_name = "${projectName}-${version}"
def jar_name = "${projectName}-${version}.jar"
def docs_dir = "api"
def test_file_suffix = "Tests"

/**
 * Generated documentation control
 */
def distro_contains_api_docs = false
def distro_api_docs_dir_name = "api"
def distro_contains_source = true
def distro_src_dir_name = "src"

/**
 * Default output format for test reports and coverage reports
 */
def default_test_report_format = "html"
def default_coverage_report_format = "html"

/**
 * Environment
 */
groovyHome = System.getenv().'GROOVY_HOME'
if (!groovyHome) {
	throw new Exception('Must set environment variable GROOVY_HOME to compile Gant.')
}

/**
 * Project structure
 */
def base = new File("").canonicalPath
def dist_artefacts_dir = "${base}/dist-artefacts"
def lib_dir = "${base}/lib"
def source_dir = "${base}/src"
def tests_dir = "${base}/tests"
def build_dir = "${base}/build"
def tools_dir = "${base}/tools"
def dist_dir = "${base}/dist"

def api_dir = "${build_dir}/api"
def compiled_classes_dir = "${build_dir}/compiled-classes"
def compiled_tests_dir = "${build_dir}/compiled-tests"

def instrumented_classes_dir = "${build_dir}/instrumented-classes"
def reports_dir = "${build_dir}/reports"
def test_reports_dir = "${reports_dir}/test"
def coverage_reports_dir = "${reports_dir}/coverage"
def cobertura_data = "${build_dir}/cobertura.ser"
def cobertura_libs = "${tools_dir}/cobertura"

/**
 * Classpath definitions
 */
Ant.path (id: 'compile_classpath') { 
	fileset (dir: lib_dir, includes: '*.jar')
	fileset (dir: "${groovyHome}/lib", includes: '*.jar')
}
Ant.path(id: 'cobertura_classpath' ) {
	fileset(dir: cobertura_libs, includes: '**/*.jar')
	path(refid: 'compile_classpath')
}

/**
 * Groovyc task
 */
Ant.taskdef (name: 'groovyc', classname: 'org.codehaus.groovy.ant.Groovyc', classpathref: 'compile_classpath')

/**
 * Cobertura tasks
 */
Ant.taskdef (classpath: "${cobertura_libs}/cobertura.jar", resource:"tasks.properties", classpathref: "cobertura_classpath")

/**
 * Create all of the directories in the build area
 */
task(initialize: '') {
	[
		api_dir,
		compiled_classes_dir,
		compiled_tests_dir,
		instrumented_classes_dir,
		reports_dir,
		test_reports_dir,
		coverage_reports_dir
	].each {
		Ant.mkdir(dir: it)
	}
}

/**
 * Empties the build directory
 */
task (clean: 'Removes all generated files') {
	Ant.delete (quiet: "false", includeemptydirs: "true") {
		fileset(dir: build_dir, includes: "**/*")
	}
}

/**
 * Compiles the source tree to the build area
 */
task (compile: 'Compiles all source') {
	depends (initialize)
	Ant.javac(srcdir: source_dir, destDir: compiled_classes_dir, source: '1.4', target: '1.4', debug: 'on', classpathref: 'compile_classpath')
	Ant.groovyc(srcdir: source_dir, destDir: compiled_classes_dir) {
		classpath {
			path(refid: 'compile_classpath')
			pathelement(location: compiled_classes_dir)
		}	
	}
}

/**
 * Adds instrumentation to the compiled class files for cobertura coverage
 */
task(instrument: '') 
{
	depends(compile)
	Ant.delete (quiet: "false", failonerror: "false") {
		fileset(dir: instrumented_classes_dir, includes: "**/*.class")
	}
	Ant."cobertura-instrument" (datafile: cobertura_data, todir: instrumented_classes_dir) {
		fileset(dir: compiled_classes_dir, includes: "**/*.class")
	}
}

/**
 * Compiles all of the tests in the tests directory to the build area
 */
task("compile-tests": '') {
	depends(compile)
	Ant.delete (quiet: "false", failonerror: "false") {
		fileset(dir: compiled_tests_dir, includes: "**/*.class")
	}
	Ant.javac (srcdir: tests_dir, destDir: compiled_tests_dir, source: '1.4', target: '1.4', debug: 'on') {
		classpath {
			path (refid: 'compile_classpath')
			pathelement (location : compiled_classes_dir)
		}
	}
	Ant.groovyc (srcdir: tests_dir, destdir: compiled_tests_dir) {
		classpath {
			path (refid: 'compile_classpath')
			pathelement (location: compiled_classes_dir)
		}
	}
}

/**
 * Defines targets "test-format" where format is an output format
 */
["plain", "xml"].each { format ->
	task(("test-" + format): "Runs all tests and produces '" + format + "' output") {
		depends ("compile-tests")
		Ant.delete (quiet: "false", failonerror: "false", includeemptydirs: "true") {
			fileset(dir: test_reports_dir, includes: "**/*")
		}
		Ant.junit (printsummary: 'yes') {
			classpath {
				pathelement (location: compiled_tests_dir)
				pathelement (location: compiled_classes_dir)
				path (refid: 'compile_classpath')
			}
			formatter(type : format)
			batchtest(fork : 'yes', todir: "${test_reports_dir}") {
				fileset(dir: compiled_tests_dir, includes: "**/*${test_file_suffix}.class")
			}
		}
	}
}

/**
 * Creates a html test report 
 */
task('test-html': "Runs all tests and produces 'html' output") {
	depends("test-xml")
	Ant.junitreport(todir: test_reports_dir) {
		fileset(dir: test_reports_dir, includes: "TEST-*.xml")
		report(format: "frames", todir: test_reports_dir)
	}
}

/**
 * Runs the test task for whatever the default_test_report_format is set to
 */
task('test': "Synonym for 'test-" + default_test_report_format + "'") {
	"test-${default_test_report_format}"()
}

/**
 * Defines targets for each individual test. If you have a test call
 */
def testPattern = ~/(.+)${test_file_suffix}\.(.+)/
def matchers = [:]
new File("tests").list([
	accept: { File dir, String name -> 
		def matcher = testPattern.matcher(name)
		if (matcher.matches())
		{
			matchers[name] = matcher
			return true
		}
		else
		{
			return false
		}
	}] as FilenameFilter).each {
		
		def testPrefix = matchers[it].group(1)
		def testName = it
		def extension = matchers[it].group(2)
		
		task(("test-" + testPrefix): "Runs the test cases in '" + testName + "'") {
			depends(compile)
			if (extension.equals("groovy") || extension.equals("java"))
			{
				if (extension.equals("groovy"))
				{
					Ant.groovyc (srcdir: tests_dir, includes: "**/${testName}", destdir: compiled_tests_dir) {
						classpath {
							path (refid: 'compile_classpath')
							pathelement (location: tests_dir)
							pathelement (location: source_dir)
							pathelement (location: compiled_tests_dir)
							pathelement (location: compiled_classes_dir)
						}
					}
				}
				else if (extension.equals("java"))
				{
					Ant.javac (srcdir: tests_dir, destDir: compiled_tests_dir, includes: it, source: '1.4', target: '1.4', debug: 'on') {
						classpath {
							path (refid: 'compile_classpath')
							pathelement (location: tests_dir)
							pathelement (location: source_dir)
							pathelement (location: compiled_tests_dir)
							pathelement (location: compiled_classes_dir)
						}
					}
				}
				
				Ant.junit (showoutput: "yes") {
					classpath {
						pathelement (location: tests_dir)
						pathelement (location: source_dir)
						pathelement (location: compiled_tests_dir)
						pathelement (location: compiled_classes_dir)
						path (refid: 'compile_classpath')
					}
					formatter(type : "plain", usefile: "no")
					batchtest(fork : 'yes') {
						fileset(dir: compiled_tests_dir, includes: "**/${testPrefix}${test_file_suffix}.class")
					}
				}
			}
			else
			{
				Ant.echo(message: "Not sure how to test '${extension} files")
			}
		}
}

/**
 * Defines targets to run cobertura coverage reports in xml and html formats
 */
["xml", "html"].each { format -> 
	task(("coverage-" + format): "Produces test coverage report in '" + format + "' format") {
		depends(instrument)
		depends("compile-tests")
		Ant.delete (quiet: "false", failonerror: "false") {
			fileset(dir: coverage_reports_dir, includes: "**/*")
		}
	
		Ant.junit (printsummary: 'yes') {
			sysproperty(key: "net.sourceforge.cobertura.datafile", file:cobertura_data)
			classpath {
				pathelement (location: compiled_tests_dir)
				pathelement (location: instrumented_classes_dir)
				pathelement (location: compiled_classes_dir)
				path (refid: 'cobertura_classpath')
			}
			batchtest(fork : 'yes') {
				fileset(dir: compiled_tests_dir, includes: "**/*${test_file_suffix}.class")
			}
		}
	
		Ant."cobertura-report" (datafile: cobertura_data, destdir: coverage_reports_dir, format: format) {
			fileset(dir: source_dir, includes: "**/*.java")
			fileset(dir: source_dir, includes: "**/*.groovy")
		}	
	}
}

/**
 * Runs the coverage report in whatever the default format iss
 */
task('coverage': "Synonym for 'coverage-" + default_coverage_report_format + "'") {
	"coverage-${default_coverage_report_format}"()
}

/**
 * Runs javadoc over the source tree
 */
task(doc: 'Produces javadoc api documentation') {
	Ant.javadoc(sourcepath: source_dir, destdir: api_dir, classpathref: "compile_classpath") {
		tag(name: "todo", scope: "all", description: "To do:")
	}
}

target(jar: 'Package up a jar') {
	depends(compile)
	Ant.jar (destfile: "${dist_dir}/${jar_name}", basedir: compiled_classes_dir) {
		manifest {
			attribute(name: 'Built-By', value: author)
		}
	}
}

/**
 * Prepares everything for a distribution
 */
task (dist: 'Gathers files together for distributing') {
	
	if (distro_contains_api_docs)
	{
		depends(doc)
	}
	
	Ant.delete (quiet: "false", includeemptydirs: "yes") {
		fileset(dir: dist_dir, includes: "**/*")
	}
	
	jar()
	Ant.copy(todir: dist_dir) {fileset(dir: dist_artefacts_dir, includes: '**/*')}
	Ant.mkdir(dir: "${dist_dir}/lib")
	Ant.copy(todir: "${dist_dir}/lib") {fileset(dir: lib_dir)}
	
	if (distro_contains_api_docs)
	{
		Ant.mkdir(dir: "${dist_dir}/${distro_api_docs_dir_name}")
		Ant.copy(todir: "${dist_dir}/${distro_api_docs_dir_name}") {fileset(dir: api_dir)}
	}
	
	if (distro_contains_source)
	{
		Ant.mkdir(dir: "${dist_dir}/${distro_src_dir_name}")
		Ant.copy(todir: "${dist_dir}/${distro_src_dir_name}") {fileset(dir: source_dir)}
	}
}

/**
 * Creates an archive of the distribution
 */
["zip", "tar"].each { format ->
	target((format): "Creates compressed archive of distribution in '" + format + "' format"){
		depends (dist) 
		def archivefile = "${build_dir}/${dist_name}.${format}"
		Ant.delete(file: archivefile)
			Ant."${format}"(destfile: archivefile) {
			"${format}fileset"(dir: dist_dir, prefix: "${dist_name}")
		}
	}	
}

/**
 * Creates a compressed archive of the distribution
 */
["gzip": "gz", "bzip2": "bz2"].each { format, extension ->
	task(("" + format): "Creates compressed archive of distribution in '" + format + "' format") {
		depends("tar")
		def archivefile = "${build_dir}/${dist_name}.tar.${extension}"
		Ant.delete(file: archivefile)
		Ant."${format}"(src: "${build_dir}/${dist_name}.tar", destfile: archivefile)
	}
}

/**
 * What will be run by `gant` with no args
 */
task('default': '') { 
	test() 
}